generator client {
  provider = "prisma-client-js"
  // engineType = "library"
  // previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id                 String         @id @default(cuid())
  username           String         @unique
  name               String?
  email              String         @unique
  emailVerified      DateTime?
  image              String?
  coverImage         String?
  password           String?
  role               Role           @default(USER)
  followerCount      Int            @default(0)
  followingCount     Int            @default(0)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  about              About?
  accounts           Account?
  blogs              Blog[]
  notifications      Notification[]
  notificationsCount Int            @default(0)
  likedBlogIds       BlogLike[]
  comments           Comment[]
  likedCommentIds    CommentLike[]
  followers          Follows[]      @relation("follower")
  following          Follows[]      @relation("following")
  report             Report[]       @relation("IssuedBy")
  reportedUser       Report[]       @relation("ReportedUser")
  history            View[]
  bookmarks          Blog[]         @relation("bookmarkedBy")
  activities         Activity[]     @relation("UserActivities")
  isActive           Boolean        @default(true)
  isOnline           Boolean        @default(false)

  @@index([username, email, id])
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
}

model About {
  id        String   @id @default(cuid())
  userId    String   @unique
  bio       String?
  location  String?
  website   String?
  career    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([id, userId])
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Blog {
  id           String     @id @default(cuid())
  slug         String?    @unique
  userId       String
  title        String
  description  String?
  content      String?
  jsonContent  Json?
  isPublished  Boolean    @default(false)
  publishedAt  DateTime?
  thumbnail    String?
  coverImage   String?
  isCommentOff Boolean    @default(false)
  likeCount    Int        @default(0)
  noOfComments Int        @default(0)
  noOfViews    Int        @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  likedBy      BlogLike[]
  Comment      Comment[]
  Report       Report[]   @relation("ReportedBlog")
  viewedBy     View[]
  tags         Tag[]      @relation("BlogToTag")
  bookmarkedBy User[]     @relation("bookmarkedBy")

  @@index([slug, id, title, description])
}

model View {
  id        String   @id @default(cuid())
  userId    String
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId])
  @@index([userId, blogId])
}

model BlogLike {
  userId    String
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, blogId])
}

model CommentLike {
  userId    String
  commentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, commentId])
}

model Tag {
  id         String   @id @default(cuid())
  tag        String   @unique
  postsCount Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  posts      Blog[]   @relation("BlogToTag")

  @@index([tag, id])
}

model Comment {
  id        String        @id @default(cuid())
  userId    String?
  blogId    String?
  content   String
  parentId  String?
  likeCount Int           @default(0)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  blog      Blog?         @relation(fields: [blogId], references: [id], onDelete: Cascade)
  parent    Comment?      @relation("CommentParent", fields: [parentId], references: [id], onDelete: Cascade)
  children  Comment[]     @relation("CommentParent")
  user      User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  likedBy   CommentLike[]
  Report    Report[]      @relation("ReportedComment")

  @@index([userId, blogId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  redirect  String
  type      String
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Log {
  id        String    @id @default(cuid())
  userId    String?
  type      String
  message   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  error     Error[]
  request   Request[]
}

model Request {
  id         String   @id @default(cuid())
  userId     String?
  method     String
  path       String
  statusCode Int
  duration   Int?
  ip         String
  userAgent  String
  logId      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  log        Log      @relation(fields: [logId], references: [id], onDelete: Cascade)
}

model Error {
  id        String   @id @default(cuid())
  userId    String?
  message   String
  stack     String?
  severity  Severity
  logId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  log       Log      @relation(fields: [logId], references: [id], onDelete: Cascade)
}

model Report {
  id                String       @id @default(cuid())
  title             String
  issue             String
  status            ReportStatus @default(PENDING)
  closedBy          String?
  reportedUserId    String?
  reportedBlogId    String?
  reportedCommentId String?
  createdBy         String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  issuedBy          User?        @relation("IssuedBy", fields: [createdBy], references: [id], onDelete: Cascade)
  reportedBlog      Blog?        @relation("ReportedBlog", fields: [reportedBlogId], references: [id], onDelete: Cascade)
  reportedComment   Comment?     @relation("ReportedComment", fields: [reportedCommentId], references: [id], onDelete: Cascade)
  reportedUser      User?        @relation("ReportedUser", fields: [reportedUserId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum Severity {
  INFO
  WARN
  ERROR
}

enum ReportStatus {
  PENDING
  RESOLVED
  REJECTED
}

model Activity {
  id        Int      @id @default(autoincrement())
  userId    String
  action    String
  timestamp DateTime @default(now())
  user      User     @relation("UserActivities", fields: [userId], references: [id])
}



model ActivityLog {
  id            String   @id @default(cuid())
  userId        String
  activityType  String
  entityType    String
  entityId      String
  createdAt     DateTime @default(now())
}